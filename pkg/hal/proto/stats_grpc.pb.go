// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StatsClient is the client API for Stats service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsClient interface {
	GetInterfaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_GetInterfacesClient, error)
	GetAclCacheSize(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CacheSize, error)
}

type statsClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsClient(cc grpc.ClientConnInterface) StatsClient {
	return &statsClient{cc}
}

func (c *statsClient) GetInterfaces(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Stats_GetInterfacesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Stats_ServiceDesc.Streams[0], "/Stats/GetInterfaces", opts...)
	if err != nil {
		return nil, err
	}
	x := &statsGetInterfacesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stats_GetInterfacesClient interface {
	Recv() (*Interface, error)
	grpc.ClientStream
}

type statsGetInterfacesClient struct {
	grpc.ClientStream
}

func (x *statsGetInterfacesClient) Recv() (*Interface, error) {
	m := new(Interface)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *statsClient) GetAclCacheSize(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CacheSize, error) {
	out := new(CacheSize)
	err := c.cc.Invoke(ctx, "/Stats/GetAclCacheSize", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsServer is the server API for Stats service.
// All implementations must embed UnimplementedStatsServer
// for forward compatibility
type StatsServer interface {
	GetInterfaces(*Empty, Stats_GetInterfacesServer) error
	GetAclCacheSize(context.Context, *Empty) (*CacheSize, error)
	mustEmbedUnimplementedStatsServer()
}

// UnimplementedStatsServer must be embedded to have forward compatible implementations.
type UnimplementedStatsServer struct {
}

func (UnimplementedStatsServer) GetInterfaces(*Empty, Stats_GetInterfacesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInterfaces not implemented")
}
func (UnimplementedStatsServer) GetAclCacheSize(context.Context, *Empty) (*CacheSize, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAclCacheSize not implemented")
}
func (UnimplementedStatsServer) mustEmbedUnimplementedStatsServer() {}

// UnsafeStatsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsServer will
// result in compilation errors.
type UnsafeStatsServer interface {
	mustEmbedUnimplementedStatsServer()
}

func RegisterStatsServer(s grpc.ServiceRegistrar, srv StatsServer) {
	s.RegisterService(&Stats_ServiceDesc, srv)
}

func _Stats_GetInterfaces_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StatsServer).GetInterfaces(m, &statsGetInterfacesServer{stream})
}

type Stats_GetInterfacesServer interface {
	Send(*Interface) error
	grpc.ServerStream
}

type statsGetInterfacesServer struct {
	grpc.ServerStream
}

func (x *statsGetInterfacesServer) Send(m *Interface) error {
	return x.ServerStream.SendMsg(m)
}

func _Stats_GetAclCacheSize_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsServer).GetAclCacheSize(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Stats/GetAclCacheSize",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsServer).GetAclCacheSize(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Stats_ServiceDesc is the grpc.ServiceDesc for Stats service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Stats_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Stats",
	HandlerType: (*StatsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAclCacheSize",
			Handler:    _Stats_GetAclCacheSize_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInterfaces",
			Handler:       _Stats_GetInterfaces_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "stats.proto",
}

// ManagementClient is the client API for Management service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ManagementClient interface {
	AddLanInterface(ctx context.Context, in *AddLanInterfaceArgs, opts ...grpc.CallOption) (*Empty, error)
	AddWanInterface(ctx context.Context, in *AddWanInterfaceArgs, opts ...grpc.CallOption) (*Empty, error)
	DeleteInterface(ctx context.Context, in *DeleteInterfaceArgs, opts ...grpc.CallOption) (*Empty, error)
}

type managementClient struct {
	cc grpc.ClientConnInterface
}

func NewManagementClient(cc grpc.ClientConnInterface) ManagementClient {
	return &managementClient{cc}
}

func (c *managementClient) AddLanInterface(ctx context.Context, in *AddLanInterfaceArgs, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Management/AddLanInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) AddWanInterface(ctx context.Context, in *AddWanInterfaceArgs, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Management/AddWanInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *managementClient) DeleteInterface(ctx context.Context, in *DeleteInterfaceArgs, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/Management/DeleteInterface", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ManagementServer is the server API for Management service.
// All implementations must embed UnimplementedManagementServer
// for forward compatibility
type ManagementServer interface {
	AddLanInterface(context.Context, *AddLanInterfaceArgs) (*Empty, error)
	AddWanInterface(context.Context, *AddWanInterfaceArgs) (*Empty, error)
	DeleteInterface(context.Context, *DeleteInterfaceArgs) (*Empty, error)
	mustEmbedUnimplementedManagementServer()
}

// UnimplementedManagementServer must be embedded to have forward compatible implementations.
type UnimplementedManagementServer struct {
}

func (UnimplementedManagementServer) AddLanInterface(context.Context, *AddLanInterfaceArgs) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLanInterface not implemented")
}
func (UnimplementedManagementServer) AddWanInterface(context.Context, *AddWanInterfaceArgs) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWanInterface not implemented")
}
func (UnimplementedManagementServer) DeleteInterface(context.Context, *DeleteInterfaceArgs) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInterface not implemented")
}
func (UnimplementedManagementServer) mustEmbedUnimplementedManagementServer() {}

// UnsafeManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ManagementServer will
// result in compilation errors.
type UnsafeManagementServer interface {
	mustEmbedUnimplementedManagementServer()
}

func RegisterManagementServer(s grpc.ServiceRegistrar, srv ManagementServer) {
	s.RegisterService(&Management_ServiceDesc, srv)
}

func _Management_AddLanInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLanInterfaceArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AddLanInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Management/AddLanInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AddLanInterface(ctx, req.(*AddLanInterfaceArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_AddWanInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddWanInterfaceArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).AddWanInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Management/AddWanInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).AddWanInterface(ctx, req.(*AddWanInterfaceArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Management_DeleteInterface_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInterfaceArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ManagementServer).DeleteInterface(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Management/DeleteInterface",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ManagementServer).DeleteInterface(ctx, req.(*DeleteInterfaceArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Management_ServiceDesc is the grpc.ServiceDesc for Management service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Management_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Management",
	HandlerType: (*ManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddLanInterface",
			Handler:    _Management_AddLanInterface_Handler,
		},
		{
			MethodName: "AddWanInterface",
			Handler:    _Management_AddWanInterface_Handler,
		},
		{
			MethodName: "DeleteInterface",
			Handler:    _Management_DeleteInterface_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stats.proto",
}
